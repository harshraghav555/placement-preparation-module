DAY 7 
SOL 1
# Definition for singly-linked list.
# class ListNode(object):
#     def __init__(self, x):
#         self.val = x
#         self.next = None

class Solution(object):
    # def hasCycle(self, head):
    #     """
    #     :type head: ListNode
    #     :rtype: bool
    #     """
    #     # Add max and check if reach max
    #     if head is None:
    #         return False
    #     count = 0
    #     max = 100000
    #     pos = head
    #     while pos is not None:
    #         count += 1
    #         pos = pos.next
    #         if count > max:
    #             return True
    #     return False

    # def hasCycle(self, head):
    #     # Hash or set
    #     dic = {}
    #     pos = head
    #     while pos is not None:
    #         try:
    #             dic[pos]
    #             return True
    #         except KeyError:
    #             dic[pos] = pos
    #         pos = pos.next
    #     return False

    def hasCycle(self, head):
        # Two points
        try:
            fast = head.next.next
            slow = head.next

            while fast != slow:
                fast = fast.next.next
                slow = slow.next

            return True
        except:
            return False
SOL 2
class Solution {
public:
   ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {// l1 list l1 and l2 list l2
       if(l1==NULL)
       {    return l2;
       }if(l2==NULL)
       {   return l1;
       }
       if(l1-> val <= l2->val )
       {
            l1->next=mergeTwoLists(l1->next,l2);
           return l1;
       }
       
       else
       {
        l2->next=mergeTwoLists(l2->next,l1);
       return l2;
       }
    }
};
SOL 3
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
       // Recursive approach
        if(!head || !(head->next))  return head;
    auto res = reverseList(head->next);
    head->next->next = head;
    head->next = NULL;
    return res;
     
    }
};