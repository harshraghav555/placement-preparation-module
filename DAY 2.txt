DAY 2 
SOL 1
public class Solution {
    // example in leetcode book
    public int[] twoSum(int[] nums, int target) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int x = nums[i];
            if (map.containsKey(target - x)) {
                return new int[]{map.get(target - x), i};
            }
            map.put(x, i);
        }
        throw new IllegalArgumentException("No two sum solution");
    }
}
SOL 2
public class Solution {
    // example in leetcode book
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
    	int p1 = 0, p2 = 0, pos = 0;
    	int ls1 = nums1.length, ls2 = nums2.length;
    	int[] all_nums = new int[ls1+ls2];
    	double median = 0.0;
    	while (p1 < ls1 && p2 < ls2){
    		if (nums1[p1] <= nums2[p2])
    			all_nums[pos++] = nums1[p1++];
    		else
    			all_nums[pos++] = nums2[p2++];
    	}
    	while (p1 < ls1)
    		all_nums[pos++] = nums1[p1++];
    	while (p2 < ls2)
    		all_nums[pos++] = nums2[p2++];
    	if ((ls1 + ls2) % 2 == 1)
    		median = all_nums[(ls1 + ls2) / 2];
    	else
    		median = (all_nums[(ls1 + ls2) / 2] + all_nums[(ls1 + ls2) / 2 - 1]) / 2.0;
        return median;
    }
}